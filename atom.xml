<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Ryan的AI小站</title>
  
  
  <link href="http://ryanhe123.github.io/atom.xml" rel="self"/>
  
  <link href="http://ryanhe123.github.io/"/>
  <updated>2021-03-12T06:15:35.553Z</updated>
  <id>http://ryanhe123.github.io/</id>
  
  <author>
    <name>Rongxuan He</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Java Course by CodeWithMosh part2笔记</title>
    <link href="http://ryanhe123.github.io/2021/03/09/Java-Course-by-CodeWithMosh-part2%E7%AC%94%E8%AE%B0/"/>
    <id>http://ryanhe123.github.io/2021/03/09/Java-Course-by-CodeWithMosh-part2%E7%AC%94%E8%AE%B0/</id>
    <published>2021-03-09T06:18:49.000Z</published>
    <updated>2021-03-12T06:15:35.553Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><p>Videos By: Mosh Hamedani<br>Link: <a href="https://www.bilibili.com/video/BV19J411t7dD">https://www.bilibili.com/video/BV19J411t7dD</a></p><span id="more"></span><h2 id="1-Getting-Started"><a href="#1-Getting-Started" class="headerlink" title="1 Getting Started"></a>1 Getting Started</h2><h3 id="1-1-Programming-Paradigms"><a href="#1-1-Programming-Paradigms" class="headerlink" title="1.1 Programming Paradigms"></a>1.1 Programming Paradigms</h3><ul><li>Procedural</li><li><strong>Functional</strong></li><li><strong>Object-oriented</strong></li><li>Event-driven</li><li>Logic</li><li>Aspect-oriented</li></ul><p><img src="https://gitee.com/hrongxuan/my-photo/raw/master/image-20210130142255072.png" alt="image-20210130142255072"></p><h4 id="Object-oriented"><a href="#Object-oriented" class="headerlink" title="Object-oriented"></a>Object-oriented</h4><p>bring <strong>Data</strong> and <strong>Behavior</strong> in a single object</p><h4 id="Functional"><a href="#Functional" class="headerlink" title="Functional"></a>Functional</h4><p><strong>Data</strong> and <strong>Behavior</strong> are different</p><h4 id="Problem-Solving"><a href="#Problem-Solving" class="headerlink" title="Problem Solving"></a>Problem Solving</h4><p>Process of <strong>defining a problem</strong>, identifying and comparing <strong>different solutions</strong> and picking the one that best solves that problem with respect to the <strong>context</strong> and <strong>constraints</strong>. </p><h3 id="Choice-in-paradigms"><a href="#Choice-in-paradigms" class="headerlink" title="Choice in paradigms"></a>Choice in paradigms</h3><p>Depends on the problem, context and budget. </p><h3 id="1-2-Benefits-of-Object-oriented-Programming"><a href="#1-2-Benefits-of-Object-oriented-Programming" class="headerlink" title="1.2 Benefits of Object-oriented Programming"></a>1.2 Benefits of Object-oriented Programming</h3><ul><li><p>reduce complexity</p></li><li><p>easier maintenance</p></li><li><p>code reuse</p></li><li><p>faster development</p></li></ul><h2 id="2-Classes"><a href="#2-Classes" class="headerlink" title="2 Classes"></a>2 Classes</h2><h3 id="2-1-Classes-and-Objects"><a href="#2-1-Classes-and-Objects" class="headerlink" title="2.1 Classes and Objects"></a>2.1 Classes and Objects</h3><h4 id="Class"><a href="#Class" class="headerlink" title="Class"></a>Class</h4><p>A blueprint for creating objects. </p><h4 id="Objects"><a href="#Objects" class="headerlink" title="Objects"></a>Objects</h4><p>An instance of a class. </p><h4 id="UML"><a href="#UML" class="headerlink" title="UML"></a>UML</h4><p>Short for <strong>Unified Modeling Language</strong></p><p><img src="https://gitee.com/hrongxuan/my-photo/raw/master/image-20210130215319545.png" alt="image-20210130215319545"></p><h3 id="2-2-Creating-Classes"><a href="#2-2-Creating-Classes" class="headerlink" title="2.2 Creating Classes"></a>2.2 Creating Classes</h3><p>In src folder-&gt; &lt;package&gt; -&gt; create a new class</p><p>Using Pascal Naming Convention</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ryanhe;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TextBox</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> String text; <span class="comment">// field</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setText</span><span class="params">(String text)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.text = text; <span class="comment">// &quot;this&quot; is used when the argument is the samme as the field.</span></span><br><span class="line">        <span class="comment">// In other cases, &quot;this&quot; is optional.</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span></span>&#123;</span><br><span class="line">        text = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-3-Creating-Objects"><a href="#2-3-Creating-Objects" class="headerlink" title="2.3 Creating Objects"></a>2.3 Creating Objects</h3><p>If you do not initialize the reference type, it will be set to null.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ryanhe;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">       TextBox textBox1 = <span class="keyword">new</span> TextBox();</span><br><span class="line">        <span class="comment">// var textBox1 = new TextBox();</span></span><br><span class="line">        <span class="comment">// &quot;var&quot; can only be used in editions after JDK10.</span></span><br><span class="line">        <span class="comment">// Current version: JDK8</span></span><br><span class="line">        textBox1.setText(<span class="string">&quot;Box 1&quot;</span>);</span><br><span class="line">        System.out.println(textBox1.text.toUpperCase());</span><br><span class="line"></span><br><span class="line">        TextBox textBox2 = <span class="keyword">new</span> TextBox();</span><br><span class="line">        textBox2.setText(<span class="string">&quot;Box 2&quot;</span>);</span><br><span class="line">        System.out.println(textBox2.text);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-4-Memory-Allocation"><a href="#2-4-Memory-Allocation" class="headerlink" title="2.4 Memory Allocation"></a>2.4 Memory Allocation</h3><p><img src="https://gitee.com/hrongxuan/my-photo/raw/master/image-20210131085710681.png" alt="image-20210131085710681"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ryanhe;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">       TextBox textBox1 = <span class="keyword">new</span> TextBox();</span><br><span class="line"></span><br><span class="line">       TextBox textBox2 = textBox1;</span><br><span class="line"></span><br><span class="line">        textBox2.setText(<span class="string">&quot;Hello World&quot;</span>);</span><br><span class="line">        System.out.println(textBox1.text) ;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The new TextBox object is stored in the heap.</p><p>The textBox1 is stored in the stack and it stores the address of the object.    </p><p>The textBox2 is referencing the same object.</p><h4 id="Deallocation"><a href="#Deallocation" class="headerlink" title="Deallocation"></a>Deallocation</h4><p>Deallocation is automatically in Java -&gt; Garbage collection.</p><h3 id="2-5-Procedural-Programming"><a href="#2-5-Procedural-Programming" class="headerlink" title="2.5 Procedural Programming"></a>2.5 Procedural Programming</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ryanhe;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> baseSalary = <span class="number">50_000</span>;</span><br><span class="line">        <span class="keyword">int</span> extraHours = <span class="number">10</span>;</span><br><span class="line">        <span class="keyword">int</span> hourlyRate = <span class="number">20</span>;</span><br><span class="line">    <span class="keyword">int</span> wage = calculateWage(baseSalary, extraHours, hourlyRate);</span><br><span class="line">        System.out.println(wage);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">calculateWage</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">            <span class="keyword">int</span> baseSalary,</span></span></span><br><span class="line"><span class="function"><span class="params">            <span class="keyword">int</span> extraHours,</span></span></span><br><span class="line"><span class="function"><span class="params">            <span class="keyword">int</span> hourlyRate</span></span></span><br><span class="line"><span class="function"><span class="params">    )</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> baseSalary + (extraHours * hourlyRate);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>In this program, the main class is bloated and the method has too many parameters.</p><p>So we’ll use object-oriented programming to refactor it.</p><h3 id="2-6-Encapsulation"><a href="#2-6-Encapsulation" class="headerlink" title="2.6 Encapsulation"></a>2.6 Encapsulation</h3><h4 id="Encapsulation"><a href="#Encapsulation" class="headerlink" title="Encapsulation"></a>Encapsulation</h4><p>Encapsulation is to bundle the data and methods that operate on the data in a single unit. </p><h4 id="Employee-java"><a href="#Employee-java" class="headerlink" title="Employee.java"></a>Employee.java</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ryanhe;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Employee</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> baseSalary;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> hourlyRate;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">calculateWage</span><span class="params">(<span class="keyword">int</span> extraHours)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> baseSalary + hourlyRate * extraHours;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Main-java"><a href="#Main-java" class="headerlink" title="Main.java"></a>Main.java</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ryanhe;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Employee employee = <span class="keyword">new</span> Employee();</span><br><span class="line">        employee.baseSalary = <span class="number">50_000</span>;</span><br><span class="line">        employee.hourlyRate = <span class="number">20</span>;</span><br><span class="line">        <span class="keyword">int</span> wage = employee.calculateWage(<span class="number">10</span>);</span><br><span class="line">    System.out.println(wage);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-7-Getters-and-Setters"><a href="#2-7-Getters-and-Setters" class="headerlink" title="2.7 Getters and Setters"></a>2.7 Getters and Setters</h3><p>Intro: what if the input salary is a negative integer?</p><p>One of the solutions: write a if statement to inspect the input of user. But it will make the main class bloated. So here we use setters and getters.</p><h4 id="Main-java-1"><a href="#Main-java-1" class="headerlink" title="Main.java"></a>Main.java</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ryanhe;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Employee employee = <span class="keyword">new</span> Employee();</span><br><span class="line">        employee.setBaseSalary(<span class="number">50_000</span>);</span><br><span class="line">        employee.setHourlyRate(<span class="number">20</span>);</span><br><span class="line">        <span class="keyword">int</span> wage = employee.calculateWage(<span class="number">10</span>);</span><br><span class="line">       System.out.println(wage);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Employee-java-1"><a href="#Employee-java-1" class="headerlink" title="Employee.java"></a>Employee.java</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ryanhe;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Employee</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> baseSalary;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> hourlyRate;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">calculateWage</span><span class="params">(<span class="keyword">int</span> extraHours)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> baseSalary + hourlyRate * extraHours;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBaseSalary</span><span class="params">(<span class="keyword">int</span> baseSalary)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (baseSalary &lt;= <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;Salary cannot be o or less.&quot;</span>);</span><br><span class="line">        <span class="keyword">this</span>.baseSalary = baseSalary;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getBaseSalary</span><span class="params">()</span> </span>&#123; </span><br><span class="line">        <span class="keyword">return</span> baseSalary;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getHourlyRate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> hourlyRate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setHourlyRate</span><span class="params">(<span class="keyword">int</span> hourlyRate)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (hourlyRate &lt;= <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;Hourly rate cannot be 0 or less.&quot;</span>);</span><br><span class="line">        <span class="keyword">this</span>.hourlyRate = hourlyRate;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Automatically-add-getters-and-setters"><a href="#Automatically-add-getters-and-setters" class="headerlink" title="Automatically add getters and setters"></a>Automatically add getters and setters</h4><p>select the variable -&gt; right click -&gt; show context actions -&gt; encapsulate field</p><h3 id="2-8-Abstraction"><a href="#2-8-Abstraction" class="headerlink" title="2.8 Abstraction"></a>2.8 Abstraction</h3><h4 id="Abstraction"><a href="#Abstraction" class="headerlink" title="Abstraction"></a>Abstraction</h4><p>Abstraction means to reduce complexity by hiding <strong>unnecessary</strong> details. </p><h3 id="2-9-Coupling"><a href="#2-9-Coupling" class="headerlink" title="2.9 Coupling"></a>2.9 Coupling</h3><h4 id="Coupling"><a href="#Coupling" class="headerlink" title="Coupling"></a>Coupling</h4><p>Coupling is about how much a class is dependent upon or coupled to another class. </p><p><img src="https://gitee.com/hrongxuan/my-photo/raw/master/image-20210131100014398.png" alt="image-20210131100014398"></p><p>hide or delete unnecessary coupling point </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ryanhe;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Employee</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> baseSalary;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> hourlyRate;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">calculateWage</span><span class="params">(<span class="keyword">int</span> extraHours)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> baseSalary + hourlyRate * extraHours;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBaseSalary</span><span class="params">(<span class="keyword">int</span> baseSalary)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (baseSalary &lt;= <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;Salary cannot be o or less.&quot;</span>);</span><br><span class="line">        <span class="keyword">this</span>.baseSalary = baseSalary;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">getBaseSalary</span><span class="params">()</span> </span>&#123; <span class="comment">// turn it into private to reduce the coupling point</span></span><br><span class="line">        <span class="keyword">return</span> baseSalary;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">getHourlyRate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> hourlyRate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setHourlyRate</span><span class="params">(<span class="keyword">int</span> hourlyRate)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (hourlyRate &lt;= <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;Hourly rate cannot be 0 or less.&quot;</span>);</span><br><span class="line">        <span class="keyword">this</span>.hourlyRate = hourlyRate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Easy-way-to-create-a-method"><a href="#Easy-way-to-create-a-method" class="headerlink" title="Easy way to create a method"></a>Easy way to create a method</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">String address;</span><br><span class="line">String ip = findIpAddress(address); </span><br></pre></td></tr></table></figure><p>Use the context action to create method automatically.</p><h4 id="Easy-way-to-create-object"><a href="#Easy-way-to-create-object" class="headerlink" title="Easy way to create object"></a>Easy way to create object</h4><p><code>new &lt;Class Name&gt;()</code> and use context action “ Introduce local variable”.</p><h3 id="2-10-Constructor"><a href="#2-10-Constructor" class="headerlink" title="2.10 Constructor"></a>2.10 Constructor</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ryanhe;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Employee</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> baseSalary;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> hourlyRate;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Employee</span><span class="params">(<span class="keyword">int</span> baseSalary, <span class="keyword">int</span> hourlyRate)</span></span>&#123; <span class="comment">// constructor</span></span><br><span class="line">        setBaseSalary(baseSalary);</span><br><span class="line">        setHourlyRate(hourlyRate);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">calculateWage</span><span class="params">(<span class="keyword">int</span> extraHours)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> baseSalary + hourlyRate * extraHours;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">setBaseSalary</span><span class="params">(<span class="keyword">int</span> baseSalary)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (baseSalary &lt;= <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;Salary cannot be o or less.&quot;</span>);</span><br><span class="line">        <span class="keyword">this</span>.baseSalary = baseSalary;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">getBaseSalary</span><span class="params">()</span> </span>&#123; <span class="comment">// turn it into private to reduce the coupling point</span></span><br><span class="line">        <span class="keyword">return</span> baseSalary;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">getHourlyRate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> hourlyRate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">setHourlyRate</span><span class="params">(<span class="keyword">int</span> hourlyRate)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (hourlyRate &lt;= <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;Hourly rate cannot be 0 or less.&quot;</span>);</span><br><span class="line">        <span class="keyword">this</span>.hourlyRate = hourlyRate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="2-11-Method-Overloading"><a href="#2-11-Method-Overloading" class="headerlink" title="2.11 Method Overloading"></a>2.11 Method Overloading</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">calculateWage</span><span class="params">(<span class="keyword">int</span> extraHours)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> baseSalary + hourlyRate * extraHours;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">calculateWage</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> calculateWage(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-12-Constructor-Overloading"><a href="#2-12-Constructor-Overloading" class="headerlink" title="2.12 Constructor Overloading"></a>2.12 Constructor Overloading</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Employee</span><span class="params">(<span class="keyword">int</span> baseSalary)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(baseSalary, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Employee</span><span class="params">(<span class="keyword">int</span> baseSalary, <span class="keyword">int</span> hourlyRate)</span></span>&#123;</span><br><span class="line">    setBaseSalary(baseSalary);</span><br><span class="line">    setHourlyRate(hourlyRate);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Easy-way-to-find-parameters-of-a-method"><a href="#Easy-way-to-find-parameters-of-a-method" class="headerlink" title="Easy way to find parameters of a method"></a>Easy way to find parameters of a method</h4><p><code>ctrl</code> + <code>P</code></p><h3 id="2-13-Static-Members"><a href="#2-13-Static-Members" class="headerlink" title="2.13 Static Members"></a>2.13 Static Members</h3><p>Instance members: belongs to <strong>instances</strong> or objects</p><p>Static menbers: belongs to a <strong>class</strong></p><p>Example: <code>Employee.numberOfEmployees</code> is does not belongs to any object of Employee.</p><p><strong>It’s unable for static method to access the non-static variables or methods unless you declare an object of the class.</strong></p><h4 id="Why-the-main-method-is-declared-as-static"><a href="#Why-the-main-method-is-declared-as-static" class="headerlink" title="Why the main method is declared as static?"></a>Why the main method is declared as static?</h4><p>Because this is to enable Java runtime to directly call this method without having to create a new object.</p><h2 id="3-Refactoring-to-an-Object-oriented-Design"><a href="#3-Refactoring-to-an-Object-oriented-Design" class="headerlink" title="3 Refactoring to an Object-oriented Design"></a>3 Refactoring to an Object-oriented Design</h2><h3 id="Easy-way-to-move-methods-to-new-class"><a href="#Easy-way-to-move-methods-to-new-class" class="headerlink" title="Easy way to move methods to new class"></a>Easy way to move methods to new class</h3><p>Select the method and use “refactor this” -&gt; “Move” </p><h4 id="Why-the-monthlyInterest-is-refactored-to-a-method-instead-of-declaring-and-initializing-in-the-constructor"><a href="#Why-the-monthlyInterest-is-refactored-to-a-method-instead-of-declaring-and-initializing-in-the-constructor" class="headerlink" title="Why the monthlyInterest is refactored to a method instead of declaring and initializing in the constructor?"></a>Why the <code>monthlyInterest</code> is refactored to a method instead of declaring and initializing in the constructor?</h4><p>If we do so, it’s unchangeable when the <code>annualInterest</code> is changed. </p><h3 id="The-Refactoring-Result"><a href="#The-Refactoring-Result" class="headerlink" title="The Refactoring Result"></a>The Refactoring Result</h3><h4 id="Structure"><a href="#Structure" class="headerlink" title="Structure"></a>Structure</h4><p>4 classes:</p><ul><li>Main</li><li>Console : Interact with users</li><li>MortgageCalculator: Calculate relevant parameters </li><li>MortgageReport: Output the results</li></ul><h4 id="Main-java-2"><a href="#Main-java-2" class="headerlink" title="Main.java"></a>Main.java</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ryanhe;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> principal = (<span class="keyword">int</span>) Console.readNumber(<span class="string">&quot;Principal(￥1K - ￥1M): &quot;</span>, <span class="number">1000</span>, <span class="number">1_000_000</span>);</span><br><span class="line">        <span class="keyword">float</span> annualInterest = (<span class="keyword">float</span>) Console.readNumber(<span class="string">&quot;Annual Interest Rate: &quot;</span>, <span class="number">0</span>, <span class="number">30</span>);</span><br><span class="line">        <span class="keyword">byte</span> years = (<span class="keyword">byte</span>) Console.readNumber(<span class="string">&quot;Period(Years): &quot;</span>, <span class="number">1</span>, <span class="number">30</span>);</span><br><span class="line"></span><br><span class="line">        MortgageCalculator calculator = <span class="keyword">new</span> MortgageCalculator(principal, annualInterest, years);</span><br><span class="line"></span><br><span class="line">        MortgageReport report = <span class="keyword">new</span> MortgageReport(calculator);</span><br><span class="line">        report.printMortgage();</span><br><span class="line">        report.printPaymentSchedule();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Console-java"><a href="#Console-java" class="headerlink" title="Console.java"></a>Console.java</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ryanhe;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Console</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">double</span> <span class="title">readNumber</span><span class="params">(String prompt)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">double</span> value;</span><br><span class="line">        System.out.print(prompt);</span><br><span class="line">        value = scanner.nextDouble();</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125; <span class="comment">// overload without min and max</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">double</span> <span class="title">readNumber</span><span class="params">(String prompt, <span class="keyword">double</span> min, <span class="keyword">double</span> max)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">double</span> value;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            System.out.print(prompt);</span><br><span class="line">            value = scanner.nextDouble();</span><br><span class="line">            <span class="keyword">if</span> (value &gt;= min &amp;&amp; value &lt;= max)</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            System.out.println(<span class="string">&quot;Enter a value between &quot;</span> + min + <span class="string">&quot; and &quot;</span> + max + <span class="string">&quot;.&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="MortgageCalculator-java"><a href="#MortgageCalculator-java" class="headerlink" title="MortgageCalculator.java"></a>MortgageCalculator.java</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ryanhe;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MortgageCalculator</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">byte</span> MONTHS_IN_YEAR = <span class="number">12</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">byte</span> PERCENT = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> principal;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span> annualInterest;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">byte</span> years;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MortgageCalculator</span><span class="params">(<span class="keyword">int</span> principal, <span class="keyword">float</span> annualInterest, <span class="keyword">byte</span> years)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.principal = principal;</span><br><span class="line">        <span class="keyword">this</span>.annualInterest = annualInterest;</span><br><span class="line">        <span class="keyword">this</span>.years = years;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">calculateBalance</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">            <span class="keyword">int</span> numberOfPaymentsMade)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> numberOfPayments = getNumberOfPayments();</span><br><span class="line">        <span class="keyword">double</span> monthlyInterest = getMonthlyInterest();</span><br><span class="line">        <span class="keyword">double</span> balance = principal * (Math.pow(<span class="number">1</span> + monthlyInterest, numberOfPayments) - Math.pow(<span class="number">1</span> + monthlyInterest,</span><br><span class="line">                numberOfPaymentsMade)) / (Math.pow(<span class="number">1</span> + monthlyInterest, numberOfPayments) - <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> balance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">calculateMortgage</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> numberOfPayments = getNumberOfPayments();</span><br><span class="line">        <span class="keyword">double</span> monthlyInterest = getMonthlyInterest();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">double</span> mortgage = principal * monthlyInterest * Math.pow(<span class="number">1</span> + monthlyInterest,</span><br><span class="line">                numberOfPayments) / (Math.pow(<span class="number">1</span> + monthlyInterest, numberOfPayments) - <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> mortgage;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">double</span>[] getRemainingBalances()&#123;</span><br><span class="line">        <span class="keyword">double</span>[] balances = <span class="keyword">new</span> <span class="keyword">double</span>[getNumberOfPayments()];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">short</span> month = <span class="number">0</span>; month &lt; balances.length; month++) &#123;</span><br><span class="line">            balances[month] = calculateBalance(month + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> balances;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">double</span> <span class="title">getMonthlyInterest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> annualInterest / MONTHS_IN_YEAR / PERCENT;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">getNumberOfPayments</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span>  years * MONTHS_IN_YEAR;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="MortgageReport-java"><a href="#MortgageReport-java" class="headerlink" title="MortgageReport.java"></a>MortgageReport.java</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ryanhe;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.text.NumberFormat;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MortgageReport</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> NumberFormat currency;</span><br><span class="line">    <span class="keyword">private</span> MortgageCalculator calculator;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MortgageReport</span><span class="params">(MortgageCalculator calculator)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.calculator = calculator;</span><br><span class="line">        currency = NumberFormat.getCurrencyInstance();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printPaymentSchedule</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println();</span><br><span class="line">        System.out.println(<span class="string">&quot;PAYMENT SCHEDULE&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;----------------&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">double</span> balance : calculator.getRemainingBalances())&#123;</span><br><span class="line">            System.out.println(currency.format(balance));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printMortgage</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">double</span> mortgage = calculator.calculateMortgage();</span><br><span class="line">        System.out.println(<span class="string">&quot;MORTGAGE&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;--------&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;Monthly Payments:&quot;</span> + currency.format(mortgage));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-Inheritance"><a href="#4-Inheritance" class="headerlink" title="4 Inheritance"></a>4 Inheritance</h2><h3 id="4-1-Inheritance"><a href="#4-1-Inheritance" class="headerlink" title="4.1 Inheritance"></a>4.1 Inheritance</h3><p><img src="https://gitee.com/hrongxuan/my-photo/raw/master/image-20210131202024208.png" alt="image-20210131202024208"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TextBox</span> <span class="keyword">extends</span> <span class="title">UIControl</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String text=<span class="string">&quot;&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-2-The-Object-Class"><a href="#4-2-The-Object-Class" class="headerlink" title="4.2 The Object Class"></a>4.2 The Object Class</h3><p>All the classes extends the class <strong>Object</strong>, which is from Java.lang.</p><p>Core methods:</p><ul><li><p>equals()</p></li><li><p>hashCode()</p></li><li><p>toString()  package it originally is from, followed by an @ sign and finally the hash code, represented as hexadecimal.</p><p>Example: <code>com.ryanhe.TextBox@1b6d3586</code></p></li><li><p>getClass()</p></li></ul><h3 id="4-3-Constructor-and-Inheritance"><a href="#4-3-Constructor-and-Inheritance" class="headerlink" title="4.3 Constructor and Inheritance"></a>4.3 Constructor and Inheritance</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ryanhe;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TextBox</span> <span class="keyword">extends</span> <span class="title">UIControl</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String text=<span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TextBox</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(<span class="keyword">true</span>); <span class="comment">// super() is used to pass parameters to the base class constructor</span></span><br><span class="line">        System.out.println(<span class="string">&quot;Textbox&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-4-Access-Modifier"><a href="#4-4-Access-Modifier" class="headerlink" title="4.4 Access Modifier"></a>4.4 Access Modifier</h3><p>private is not inherited by subclasses.</p><p>protected and (default) should be avoided.</p><table><thead><tr><th>modifier</th><th>Current Class</th><th>Classes in the same package</th><th>Inheritance</th><th>Other classes</th></tr></thead><tbody><tr><td>private</td><td>√</td><td>×</td><td>×</td><td>×</td></tr><tr><td>(default)</td><td>√</td><td>√</td><td>×</td><td>×</td></tr><tr><td>protected</td><td>√</td><td>√</td><td>√</td><td>×</td></tr><tr><td>public</td><td>√</td><td>√</td><td>√</td><td>√</td></tr></tbody></table><h3 id="4-5-Method-Overriding"><a href="#4-5-Method-Overriding" class="headerlink" title="4.5 Method Overriding"></a>4.5 Method Overriding</h3><p><strong>Pay attention to the difference between overload and override.</strong></p><h4 id="Annotation"><a href="#Annotation" class="headerlink" title="Annotation"></a>Annotation</h4><p>Annotation is basically a label that we attach to a class member.</p><p>Example: <code>@Override</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public String toString()&#123;</span><br><span class="line">    return text;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// System.out.println(textBox.toString());</span></span><br><span class="line">System.out.println(textBox); <span class="comment">// println() automatically calls toString()</span></span><br></pre></td></tr></table></figure><h3 id="4-6-Upcasting-and-Downcasting"><a href="#4-6-Upcasting-and-Downcasting" class="headerlink" title="4.6 Upcasting and Downcasting"></a>4.6 Upcasting and Downcasting</h3><p>Upcasting is casting an object to one of its <strong>super</strong> types. </p><p>Downcasting is casting an object to one of its <strong>sub</strong> types. </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ryanhe;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">       UIControl control = <span class="keyword">new</span> UIControl(<span class="keyword">true</span>);</span><br><span class="line">       TextBox textBox = <span class="keyword">new</span> TextBox();</span><br><span class="line">       show(textBox);</span><br><span class="line">       <span class="comment">// show(control); will throw out an exception</span></span><br><span class="line">        <span class="comment">// control cannot be casted to the TextBox class.</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">(UIControl control)</span></span>&#123;</span><br><span class="line">        TextBox textBox = (TextBox)control;</span><br><span class="line">        textBox.setText(<span class="string">&quot;Hello World&quot;</span>);</span><br><span class="line">        System.out.println(control);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="instanceof"><a href="#instanceof" class="headerlink" title="instanceof"></a>instanceof</h4><p>instanceof is used to judge whether a variable is an instance of a class</p><p>Example: <code>control instanceof TextBox</code> </p><h4 id="Correction"><a href="#Correction" class="headerlink" title="Correction"></a>Correction</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ryanhe;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">       UIControl control = <span class="keyword">new</span> UIControl(<span class="keyword">true</span>);</span><br><span class="line">       TextBox textBox = <span class="keyword">new</span> TextBox();</span><br><span class="line">       show(textBox);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">(UIControl control)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (control <span class="keyword">instanceof</span> TextBox) &#123;</span><br><span class="line">            TextBox textBox = (TextBox) control;</span><br><span class="line">            textBox.setText(<span class="string">&quot;Hello World&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(control);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-7-Comparing-Objects"><a href="#4-7-Comparing-Objects" class="headerlink" title="4.7 Comparing Objects"></a>4.7 Comparing Objects</h3><ol><li><p>Right Click -&gt; <code>generate</code> -&gt; <code>Override Methods</code></p></li><li><p>Right Click -&gt; <code>generate</code> -&gt; <code>equals() and hashCode()</code></p></li></ol><h4 id="Method-1"><a href="#Method-1" class="headerlink" title="Method 1"></a>Method 1</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object obj)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span> == obj)</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    <span class="keyword">if</span> (!(obj <span class="keyword">instanceof</span> Point))</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    Point other = (Point)obj;</span><br><span class="line">    <span class="keyword">return</span> other.x ==x &amp;&amp; other.y == y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> Objects.hash(x, y);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Method-2"><a href="#Method-2" class="headerlink" title="Method 2"></a>Method 2</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span> == o) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    <span class="keyword">if</span> (o == <span class="keyword">null</span> || getClass() != o.getClass()) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    Point point = (Point) o;</span><br><span class="line">    <span class="keyword">return</span> x == point.x &amp;&amp; y == point.y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> Objects.hash(x, y);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Main-java-3"><a href="#Main-java-3" class="headerlink" title="Main.java"></a>Main.java</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ryanhe;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    Point point1 = <span class="keyword">new</span> Point(<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line">    Point point2 = <span class="keyword">new</span> Point(<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line">        System.out.println(point1 == point2); <span class="comment">// false, because they have different addresses.</span></span><br><span class="line">        System.out.println(point1.equals(point2));<span class="comment">// before override: false</span></span><br><span class="line">        System.out.println(point1.hashCode());</span><br><span class="line">        System.out.println(point2.hashCode());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-8-Polymorphism"><a href="#4-8-Polymorphism" class="headerlink" title="4.8 Polymorphism"></a>4.8 Polymorphism</h3><p>In the UIControl class, define an empty render method. And in its sub classes, override the render method.</p><h3 id="4-9-Abstract-Classes-and-Methods"><a href="#4-9-Abstract-Classes-and-Methods" class="headerlink" title="4.9 Abstract Classes and Methods"></a>4.9 Abstract Classes and Methods</h3><p>declare the class as abstract</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ryanhe;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">UIControl</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">boolean</span> isEnabled = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">render</span><span class="params">()</span></span>; </span><br><span class="line">    <span class="comment">// When we declare the method as abstract,</span></span><br><span class="line">    <span class="comment">// The subclasses must override this method.</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">enable</span><span class="params">()</span></span>&#123;</span><br><span class="line">        isEnabled = <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">disable</span><span class="params">()</span></span>&#123;</span><br><span class="line">        isEnabled = <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="4-10-Final-Classes-and-Methods"><a href="#4-10-Final-Classes-and-Methods" class="headerlink" title="4.10 Final Classes and Methods"></a>4.10 Final Classes and Methods</h3><h4 id="Final-Classes"><a href="#Final-Classes" class="headerlink" title="Final Classes"></a>Final Classes</h4><p>If a class is declared as final, it cannot be extended.</p><h4 id="Final-Methods"><a href="#Final-Methods" class="headerlink" title="Final Methods"></a>Final Methods</h4><p>If a method is declared as final, it cannot be overriden.</p><h3 id="4-11-Deep-Inheritance-Hierarchies"><a href="#4-11-Deep-Inheritance-Hierarchies" class="headerlink" title="4.11 Deep Inheritance Hierarchies"></a>4.11 Deep Inheritance Hierarchies</h3><p><strong>Do not create deep inheritance hierarchies.</strong></p><p>Example:</p><p><img src="https://gitee.com/hrongxuan/my-photo/raw/master/image-20210131214847361.png" alt="image-20210131214847361"></p><p>If Entity is modified, all these children and grandchildren should be compiled and redeployed. </p><p><strong>NO MORE THAN 3 LEVELS.</strong></p><h3 id="4-12-Multiple-Inheritance"><a href="#4-12-Multiple-Inheritance" class="headerlink" title="4.12 Multiple Inheritance"></a>4.12 Multiple Inheritance</h3><p><img src="https://gitee.com/hrongxuan/my-photo/raw/master/image-20210131215324828.png" alt="image-20210131215324828"></p><p><img src="https://gitee.com/hrongxuan/my-photo/raw/master/image-20210131215356600.png" alt="image-20210131215356600"></p><h4 id="Diamond-Problem"><a href="#Diamond-Problem" class="headerlink" title="Diamond Problem"></a>Diamond Problem</h4><p><img src="https://gitee.com/hrongxuan/my-photo/raw/master/image-20210131215427082.png" alt="image-20210131215427082"></p><p><strong>Java does not support Multiple Inheritance.</strong></p><h2 id="5-Inferface"><a href="#5-Inferface" class="headerlink" title="5 Inferface"></a>5 Inferface</h2><h3 id="5-1-What-is-Interface"><a href="#5-1-What-is-Interface" class="headerlink" title="5.1 What is Interface"></a>5.1 What is Interface</h3><p>We use interface to build loosely-coupled extensible testable applications. </p><p>interface only have method declarations</p><p><img src="https://gitee.com/hrongxuan/my-photo/raw/master/image-20210201223808995.png" alt="image-20210201223808995"></p><ul><li>Interface tells us <strong>what</strong> should be done. </li><li>Classes tells us <strong>how</strong> it should be done. </li></ul><h3 id="5-2-Creating-an-Interface"><a href="#5-2-Creating-an-Interface" class="headerlink" title="5.2 Creating an Interface"></a>5.2 Creating an Interface</h3><p>In the interface, public is not needed when declaring a method.</p><h4 id="TaxCalculator-java"><a href="#TaxCalculator-java" class="headerlink" title="TaxCalculator.java"></a>TaxCalculator.java</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ryanhe;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">TaxCalculator</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">calculateTax</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="TaxCalulator2018-java"><a href="#TaxCalulator2018-java" class="headerlink" title="TaxCalulator2018.java"></a>TaxCalulator2018.java</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ryanhe;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TaxCalculator2018</span> <span class="keyword">implements</span> <span class="title">TaxCalculator</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> taxableIncome;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TaxCalculator2018</span><span class="params">(<span class="keyword">double</span> taxableIncome)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.taxableIncome = taxableIncome;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">calculateTax</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> taxableIncome * <span class="number">0.3</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="TaxReport-java"><a href="#TaxReport-java" class="headerlink" title="TaxReport.java"></a>TaxReport.java</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ryanhe;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TaxReport</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> TaxCalculator2018 calculator;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TaxReport</span><span class="params">()</span></span>&#123;</span><br><span class="line">        calculator = <span class="keyword">new</span> TaxCalculator2018(<span class="number">100_000</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">double</span> tax = calculator.calculateTax();</span><br><span class="line">        System.out.println(tax);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-3-Dependency-Injection"><a href="#5-3-Dependency-Injection" class="headerlink" title="5.3 Dependency Injection"></a>5.3 Dependency Injection</h3><p>Our Classes should not instantiate their dependencies.</p><ul><li>Constructor Injection</li><li>Setter Injection </li><li>Method Injection</li></ul><h3 id="5-4-Constructor-Injection"><a href="#5-4-Constructor-Injection" class="headerlink" title="5.4 Constructor Injection"></a>5.4 Constructor Injection</h3><h4 id="TaxReport-java-1"><a href="#TaxReport-java-1" class="headerlink" title="TaxReport.java"></a>TaxReport.java</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ryanhe;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TaxReport</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> TaxCalculator calculator;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TaxReport</span><span class="params">(TaxCalculator calculator)</span></span>&#123; <span class="comment">// constructor injection</span></span><br><span class="line">        <span class="keyword">this</span>.calculator = calculator;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">double</span> tax = calculator.calculateTax();</span><br><span class="line">        System.out.println(tax);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Main-java-4"><a href="#Main-java-4" class="headerlink" title="Main.java"></a>Main.java</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ryanhe;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        TaxCalculator2018 calculator = <span class="keyword">new</span> TaxCalculator2018(<span class="number">100_000</span>);</span><br><span class="line">        TaxReport report = <span class="keyword">new</span> TaxReport(calculator);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-5-Setter-Injection"><a href="#5-5-Setter-Injection" class="headerlink" title="5.5 Setter Injection"></a>5.5 Setter Injection</h3><h4 id="TaxReport-java-2"><a href="#TaxReport-java-2" class="headerlink" title="TaxReport.java"></a>TaxReport.java</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ryanhe;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TaxReport</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> TaxCalculator calculator;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TaxReport</span><span class="params">(TaxCalculator calculator)</span></span>&#123; <span class="comment">// constructor injection</span></span><br><span class="line">        <span class="keyword">this</span>.calculator = calculator;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">double</span> tax = calculator.calculateTax();</span><br><span class="line">        System.out.println(tax);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCalculator</span><span class="params">(TaxCalculator calculator)</span> </span>&#123; <span class="comment">// setter injection</span></span><br><span class="line">        <span class="keyword">this</span>.calculator = calculator;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Main-java-5"><a href="#Main-java-5" class="headerlink" title="Main.java"></a>Main.java</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ryanhe;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        TaxCalculator2018 calculator = <span class="keyword">new</span> TaxCalculator2018(<span class="number">100_000</span>);</span><br><span class="line">        TaxReport report = <span class="keyword">new</span> TaxReport(calculator);</span><br><span class="line">        report.show();</span><br><span class="line"></span><br><span class="line">        report.setCalculator(<span class="keyword">new</span> TaxCalculator2019());</span><br><span class="line">        report.show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-6-Method-Injection"><a href="#5-6-Method-Injection" class="headerlink" title="5.6 Method Injection"></a>5.6 Method Injection</h3><h4 id="TaxReport-java-3"><a href="#TaxReport-java-3" class="headerlink" title="TaxReport.java"></a>TaxReport.java</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ryanhe;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TaxReport</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> TaxCalculator calculator;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">(TaxCalculator calculator)</span></span>&#123;</span><br><span class="line">        <span class="keyword">double</span> tax = calculator.calculateTax();</span><br><span class="line">        System.out.println(tax);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Main-java-6"><a href="#Main-java-6" class="headerlink" title="Main.java"></a>Main.java</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ryanhe;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        TaxCalculator2018 calculator = <span class="keyword">new</span> TaxCalculator2018(<span class="number">100_000</span>);</span><br><span class="line">        TaxReport report = <span class="keyword">new</span> TaxReport();</span><br><span class="line">        report.show(calculator);</span><br><span class="line">        report.show(<span class="keyword">new</span> TaxCalculator2019());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-7-Interface-Segregation-Principle"><a href="#5-7-Interface-Segregation-Principle" class="headerlink" title="5.7 Interface Segregation Principle"></a>5.7 Interface Segregation Principle</h3><p>Divide a big fat interface into a bunch of smaller ones.</p><p><strong>Class cannot have multiple parents, but an interface can have multiple parents.</strong></p><h4 id="UIWidget-java"><a href="#UIWidget-java" class="headerlink" title="UIWidget.java"></a>UIWidget.java</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ryanhe;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UIWidget</span></span></span><br><span class="line"><span class="class">        <span class="keyword">extends</span> <span class="title">Draggable</span>, <span class="title">Resizable</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">render</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Though every time we use the drag and resize, we should instantiate an object of UIWidget, the three methods belongs to different interface so, they are independent.</p><h4 id="Draggable-java"><a href="#Draggable-java" class="headerlink" title="Draggable.java"></a>Draggable.java</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ryanhe;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Draggable</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">drag</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Resizable-java"><a href="#Resizable-java" class="headerlink" title="Resizable.java"></a>Resizable.java</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ryanhe;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Resizable</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">resize</span><span class="params">(<span class="keyword">int</span> size)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">resize</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">resizeTo</span><span class="params">(UIWidget widget)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Dragger-java"><a href="#Dragger-java" class="headerlink" title="Dragger.java"></a>Dragger.java</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ryanhe;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dragger</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">drag</span><span class="params">(UIWidget widget)</span> </span>&#123;</span><br><span class="line">        widget.drag();</span><br><span class="line">        System.out.println(<span class="string">&quot;Dragging done!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-8-Bad-Features-on-Interfaces"><a href="#5-8-Bad-Features-on-Interfaces" class="headerlink" title="5.8 Bad Features on Interfaces"></a>5.8 Bad Features on Interfaces</h3><ul><li><p>Fields</p><p>Declaring fields in our interfaces. </p><p>Fields are <strong>final and static</strong>.</p><p>Fields should be declared in the implementations, so we should avoid using fields in our interfaces. </p></li><li><p>Static Methods</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ryanhe;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">TaxCalculator</span> </span>&#123;</span><br><span class="line">    <span class="keyword">float</span> minimumTax = <span class="number">100</span>; <span class="comment">// final and static</span></span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">calculateTax</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">double</span> <span class="title">getTaxableIncome</span><span class="params">(<span class="keyword">double</span> income, <span class="keyword">double</span> expenses)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> income - expenses;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Here we add a static method into the interface, but it will make our Interface have implementation.</p><p>Solution: declare a new abstract method</p></li><li><p>Private Methods</p></li></ul><h3 id="5-9-Interfaces-and-Abstract-Classes"><a href="#5-9-Interfaces-and-Abstract-Classes" class="headerlink" title="5.9 Interfaces and Abstract Classes"></a>5.9 Interfaces and Abstract Classes</h3><p><img src="https://gitee.com/hrongxuan/my-photo/raw/master/image-20210202110958742.png" alt="image-20210202110958742"></p><h3 id="5-10-When-to-Use-Interface"><a href="#5-10-When-to-Use-Interface" class="headerlink" title="5.10 When to Use Interface?"></a>5.10 When to Use Interface?</h3><h4 id="Benefits-of-Interface"><a href="#Benefits-of-Interface" class="headerlink" title="Benefits of Interface"></a>Benefits of Interface</h4><ul><li>Swap Implementations</li><li>Extend Your Applications</li><li>Test Your Classes in Isolation</li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;Videos By: Mosh Hamedani&lt;br&gt;Link: &lt;a href=&quot;https://www.bilibili.com/video/BV19J411t7dD&quot;&gt;https://www.bilibili.com/video/BV19J411t7dD&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="Java" scheme="http://ryanhe123.github.io/categories/Java/"/>
    
    
    <category term="Java" scheme="http://ryanhe123.github.io/tags/Java/"/>
    
    <category term="CodeWithMosh" scheme="http://ryanhe123.github.io/tags/CodeWithMosh/"/>
    
  </entry>
  
  <entry>
    <title>Java Course by CodeWithMosh part1笔记</title>
    <link href="http://ryanhe123.github.io/2021/03/09/Java-Course-by-CodeWithMosh-part1%E7%AC%94%E8%AE%B0/"/>
    <id>http://ryanhe123.github.io/2021/03/09/Java-Course-by-CodeWithMosh-part1%E7%AC%94%E8%AE%B0/</id>
    <published>2021-03-09T05:15:28.000Z</published>
    <updated>2021-03-12T06:15:35.553Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><p>Videos by: Mosh Hamedani<br>Link: <a href="https://www.bilibili.com/video/BV19J411t7dD">https://www.bilibili.com/video/BV19J411t7dD</a></p><span id="more"></span><h2 id="1-Getting-Started"><a href="#1-Getting-Started" class="headerlink" title="1 Getting Started"></a>1 Getting Started</h2><h3 id="1-1-Installing-Java"><a href="#1-1-Installing-Java" class="headerlink" title="1.1 Installing Java"></a>1.1 Installing Java</h3><p>JDK: Java Development Kit</p><h3 id="1-2-Anatomy-of-a-Java-Program"><a href="#1-2-Anatomy-of-a-Java-Program" class="headerlink" title="1.2 Anatomy of a Java Program"></a>1.2 Anatomy of a Java Program</h3><h4 id="Function"><a href="#Function" class="headerlink" title="Function"></a>Function</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sendEmail</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>every java program should have at least one function: <strong>main()</strong></p><p>function belongs to class</p><h4 id="Class"><a href="#Class" class="headerlink" title="Class"></a>Class</h4><p>container for related functions </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Main</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>method: a function that is part of a class</p><h4 id="Access-Modifier"><a href="#Access-Modifier" class="headerlink" title="Access Modifier"></a>Access Modifier</h4><p>public private etc.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Name-Convention"><a href="#Name-Convention" class="headerlink" title="Name Convention"></a>Name Convention</h4><p>Classes: pascal <strong>P</strong>ascal<strong>N</strong>aming<strong>C</strong>onvention</p><p>Methods: camel camel<strong>N</strong>aming<strong>C</strong>onvention</p><h3 id="1-3-Your-First-Java-Program"><a href="#1-3-Your-First-Java-Program" class="headerlink" title="1.3 Your First Java Program"></a>1.3 Your First Java Program</h3><h4 id="Package"><a href="#Package" class="headerlink" title="Package"></a>Package</h4><p>Group related classes。</p><h4 id="Structure"><a href="#Structure" class="headerlink" title="Structure"></a>Structure</h4><ul><li>Project<ul><li>src :source folder<ul><li>com.package (base package)<ul><li>class Main</li></ul></li></ul></li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ryanhe; <span class="comment">// package statement</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;Hello World&quot;</span>); <span class="comment">// System:class out:field println:function</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-4-How-Java-Code-Gets-Executed"><a href="#1-4-How-Java-Code-Gets-Executed" class="headerlink" title="1.4 How Java Code Gets Executed"></a>1.4 How Java Code Gets Executed</h3><p>Two steps: compilation execution</p><h4 id="Compilation"><a href="#Compilation" class="headerlink" title="Compilation"></a>Compilation</h4><p><img src="https://gitee.com/hrongxuan/my-photo/raw/master/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202021-01-28%20171307.jpg" alt="屏幕截图 2021-01-28 171307"></p><p>In cmd: javac Main.java</p><p>Get the file: Main.class</p><h4 id="Execution"><a href="#Execution" class="headerlink" title="Execution"></a>Execution</h4><p>Java Runtime Environment (JRE)</p><p><img src="https://gitee.com/hrongxuan/my-photo/raw/master/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202021-01-28%20172139.jpg" alt="屏幕截图 2021-01-28 172139"></p><p>In cmd: java com.&lt;package name&gt;.Main</p><h3 id="1-5-5-Interesting-Facts-about-Java"><a href="#1-5-5-Interesting-Facts-about-Java" class="headerlink" title="1.5 5 Interesting Facts about Java"></a>1.5 5 Interesting Facts about Java</h3><ol><li>Four editions of Java<ul><li>Standard Edition SE</li><li>Enterprise Edition EE: <ul><li>large scale and distributed system </li><li>fault tolerant distributed multi-tiered software</li></ul></li><li>Micro Edition ME:<ul><li>mobile devices</li></ul></li><li>Java Card:<ul><li>smart card</li></ul></li></ul></li></ol><h2 id="2-Types"><a href="#2-Types" class="headerlink" title="2 Types"></a>2 Types</h2><h3 id="2-1-Variables"><a href="#2-1-Variables" class="headerlink" title="2.1 Variables"></a>2.1 Variables</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ryanhe; <span class="comment">// package statement</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> myAge = <span class="number">30</span>;</span><br><span class="line">    <span class="keyword">int</span> herAge = myAge;</span><br><span class="line">        System.out.println(herAge);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-2-Primitive-Types"><a href="#2-2-Primitive-Types" class="headerlink" title="2.2 Primitive Types"></a>2.2 Primitive Types</h3><ul><li>Primitive for storing simple values</li><li>Reference for storing complex objects</li></ul><table><thead><tr><th>Type</th><th>Bytes</th><th>Range</th></tr></thead><tbody><tr><td>byte</td><td>1</td><td>[-128,127]</td></tr><tr><td>short</td><td>2</td><td>[-32K,32K]</td></tr><tr><td>int</td><td>4</td><td>[-2B,2B]</td></tr><tr><td>long</td><td>8</td><td></td></tr><tr><td>float</td><td>4</td><td></td></tr><tr><td>double</td><td>8</td><td></td></tr><tr><td>char</td><td>2</td><td>A,B,C…(UNICODE)</td></tr><tr><td>boolean</td><td>1</td><td>true/false</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ryanhe; <span class="comment">// package statement</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">byte</span> age = <span class="number">30</span>;</span><br><span class="line">    <span class="keyword">int</span> viewsCount = <span class="number">123_456_789</span>; <span class="comment">//use underscore to represent long integer (optional)</span></span><br><span class="line">        <span class="keyword">long</span> viewsCount2 = <span class="number">3_123_456_789L</span>; <span class="comment">//remember the L(both upper and lower are OK,but upper recommended)</span></span><br><span class="line">        <span class="keyword">float</span> price = <span class="number">10.99f</span>; <span class="comment">//10.99 is viewed as double by default, so add f/F at the end of the number</span></span><br><span class="line">        <span class="keyword">char</span> letter = <span class="string">&#x27;A&#x27;</span>;</span><br><span class="line">        <span class="keyword">boolean</span> isEligible = <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-3-Reference-Types"><a href="#2-3-Reference-Types" class="headerlink" title="2.3 Reference Types"></a>2.3 Reference Types</h3><p>sout + <code>Tab</code> can easily call out <code>System.out.println();</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ryanhe; <span class="comment">// package statement</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Date; <span class="comment">// This line is added automatically.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">byte</span> age = <span class="number">30</span>;</span><br><span class="line">        Date now = <span class="keyword">new</span> Date();</span><br><span class="line">        System.out.println(now); <span class="comment">// get the current time on your device</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-4-Primitive-VS-Reference"><a href="#2-4-Primitive-VS-Reference" class="headerlink" title="2.4 Primitive VS. Reference"></a>2.4 Primitive VS. Reference</h3><h4 id="Primitive"><a href="#Primitive" class="headerlink" title="Primitive"></a>Primitive</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ryanhe; <span class="comment">// package statement</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">byte</span> x = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">byte</span> y = x;</span><br><span class="line">    x = <span class="number">2</span>;</span><br><span class="line">        System.out.println(y); <span class="comment">// 1</span></span><br><span class="line">        <span class="comment">// x &amp; y are independent.</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ryanhe; <span class="comment">// package statement</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Point point1 = <span class="keyword">new</span> Point(<span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">        Point point2 = point1;</span><br><span class="line">        point1.x = <span class="number">2</span>;</span><br><span class="line">        System.out.println(point2.x);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>point1 and point2 stores the address, so the 2 variables share the same value.</p><h3 id="2-5-Strings"><a href="#2-5-Strings" class="headerlink" title="2.5 Strings"></a>2.5 Strings</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ryanhe; <span class="comment">// package statement</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// String message = new String(&quot;Hello world&quot;);</span></span><br><span class="line">        String message = <span class="string">&quot;  Hello world&quot;</span> + <span class="string">&quot;!!&quot;</span>; <span class="comment">//string is still reference type</span></span><br><span class="line">        System.out.println(message.startsWith(<span class="string">&quot;!!&quot;</span>));</span><br><span class="line">        System.out.println(message.endsWith(<span class="string">&quot;!!&quot;</span>));</span><br><span class="line">        System.out.println(message.length());</span><br><span class="line">        System.out.println(message.indexOf(<span class="string">&quot;sky&quot;</span>)); </span><br><span class="line">        System.out.println(message.replace(<span class="string">&quot;!&quot;</span>,<span class="string">&quot;*&quot;</span>));</span><br><span class="line">        <span class="comment">//target &amp; replacement are parameters !  * are arguments</span></span><br><span class="line">        System.out.println(message.toLowerCase());</span><br><span class="line">        System.out.println(message.trim()); <span class="comment">// remove the space at the beginning or end of the string</span></span><br><span class="line">        System.out.println(message); <span class="comment">// Hello world!!</span></span><br><span class="line">        <span class="comment">// string is immutable!!!</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">false</span></span><br><span class="line"><span class="keyword">true</span></span><br><span class="line"><span class="number">15</span></span><br><span class="line">-<span class="number">1</span></span><br><span class="line">  Hello world**</span><br><span class="line">  hello world!!</span><br><span class="line">Hello world!!</span><br><span class="line">  Hello world!!</span><br></pre></td></tr></table></figure><h3 id="2-6-Escape-Sequences"><a href="#2-6-Escape-Sequences" class="headerlink" title="2.6 Escape Sequences"></a>2.6 Escape Sequences</h3><p><code>\&quot;    </code>     <code>\\</code>     <code>\n        </code>     <code>\t</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ryanhe; <span class="comment">// package statement</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// c:\Windows\...</span></span><br><span class="line">        String address = <span class="string">&quot;c:\\Windows\\...&quot;</span>; <span class="comment">// c:\Windows\...</span></span><br><span class="line">        System.out.println(address);</span><br><span class="line">        String message = <span class="string">&quot;Hello \t\&quot;Ryan\&quot;&quot;</span>;</span><br><span class="line">        System.out.println(message);</span><br><span class="line">        System.out.println(address + <span class="string">&#x27;\n&#x27;</span> + message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-7-Arrays"><a href="#2-7-Arrays" class="headerlink" title="2.7 Arrays"></a>2.7 Arrays</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ryanhe; <span class="comment">// package statement</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] numbers = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">5</span>]; <span class="comment">// array is reference type</span></span><br><span class="line">        numbers[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        numbers[<span class="number">1</span>] = <span class="number">2</span>;</span><br><span class="line">        <span class="comment">// numbers[10] = 3;</span></span><br><span class="line">        <span class="comment">//Exception in thread &quot;main&quot; java.lang.ArrayIndexOutOfBoundsException: 10</span></span><br><span class="line">        <span class="comment">// at com.ryanhe.Main.main(Main.java:9)</span></span><br><span class="line">        System.out.println(numbers); <span class="comment">// [I@1b6d3586</span></span><br><span class="line">        System.out.println(Arrays.toString(numbers)); <span class="comment">// [1, 2, 0, 0, 0] 0 is default</span></span><br><span class="line">        <span class="comment">// In boolean array false is default</span></span><br><span class="line">        <span class="comment">// In string array empty string is default</span></span><br><span class="line">        <span class="keyword">int</span>[] numbers2 = &#123;<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">1</span>,<span class="number">4</span>&#125;;</span><br><span class="line">        System.out.println(numbers2.length);</span><br><span class="line">        Arrays.sort(numbers2);</span><br><span class="line">        System.out.println(Arrays.toString(numbers2));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-8-Multi-dimensional-Arrays"><a href="#2-8-Multi-dimensional-Arrays" class="headerlink" title="2.8 Multi-dimensional Arrays"></a>2.8 Multi-dimensional Arrays</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ryanhe; <span class="comment">// package statement</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[][] numbers = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">2</span>][<span class="number">3</span>]; <span class="comment">// array is reference type</span></span><br><span class="line">        numbers[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        System.out.println(Arrays.toString(numbers)); <span class="comment">// [[I@1b6d3586, [I@4554617c]</span></span><br><span class="line">        System.out.println(Arrays.deepToString(numbers));</span><br><span class="line">        <span class="keyword">int</span> [][] numbers2 = &#123;&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;,&#123;<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>&#125;&#125;;</span><br><span class="line">        System.out.println(Arrays.deepToString(numbers2)); <span class="comment">//[[1, 2, 3], [4, 5, 6]]</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-9-Constants"><a href="#2-9-Constants" class="headerlink" title="2.9 Constants"></a>2.9 Constants</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ryanhe; <span class="comment">// package statement</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">float</span> PI = <span class="number">3.14f</span>;</span><br><span class="line">        <span class="comment">// PI = 1; Cannot assign a value to final variable &#x27;PI&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-10-Arithmetic-Expressions"><a href="#2-10-Arithmetic-Expressions" class="headerlink" title="2.10 Arithmetic Expressions"></a>2.10 Arithmetic Expressions</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ryanhe; <span class="comment">// package statement</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> result = <span class="number">10</span> / <span class="number">3</span>;</span><br><span class="line">        System.out.println(result); <span class="comment">// 3</span></span><br><span class="line">        <span class="keyword">double</span> result2 = (<span class="keyword">double</span>)<span class="number">10</span> / (<span class="keyword">double</span>)<span class="number">3</span>; <span class="comment">// 3.3333333333333335</span></span><br><span class="line">        System.out.println(result2);</span><br><span class="line">        <span class="keyword">int</span> x = <span class="number">1</span>;</span><br><span class="line">        x++; <span class="comment">// ++ increment operator</span></span><br><span class="line">        <span class="comment">// ++x;</span></span><br><span class="line">        <span class="keyword">int</span> y = x++;</span><br><span class="line">        System.out.println(x); <span class="comment">// 3</span></span><br><span class="line">        System.out.println(y); <span class="comment">// 2</span></span><br><span class="line">        <span class="keyword">int</span> z = ++y;</span><br><span class="line">        System.out.println(y); <span class="comment">// 3</span></span><br><span class="line">        System.out.println(z); <span class="comment">// 3</span></span><br><span class="line">        x += <span class="number">2</span>; <span class="comment">// augmented/compound assignment operator</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-11-Order-of-Operations"><a href="#2-11-Order-of-Operations" class="headerlink" title="2.11 Order of Operations"></a>2.11 Order of Operations</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ryanhe; <span class="comment">// package statement</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> x = <span class="number">10</span> + <span class="number">3</span> * <span class="number">2</span>;</span><br><span class="line">        System.out.println(x); <span class="comment">// 16</span></span><br><span class="line">        <span class="keyword">int</span> y = (<span class="number">10</span> + <span class="number">3</span>) * <span class="number">2</span>;</span><br><span class="line">        System.out.println(y); <span class="comment">// 26</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-12-Casting"><a href="#2-12-Casting" class="headerlink" title="2.12 Casting"></a>2.12 Casting</h3><h4 id="Implicit-Casting"><a href="#Implicit-Casting" class="headerlink" title="Implicit Casting"></a>Implicit Casting</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ryanhe; <span class="comment">// package statement</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// Implicit casting</span></span><br><span class="line">        <span class="comment">// byte &gt; short &gt; int &gt; long &gt; float &gt; double </span></span><br><span class="line">        <span class="keyword">short</span> x = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> y = x + <span class="number">2</span>;</span><br><span class="line">        System.out.println(y); <span class="comment">// 3</span></span><br><span class="line">        <span class="keyword">double</span> j = <span class="number">1.1</span>;</span><br><span class="line">        <span class="keyword">double</span> k = j + <span class="number">2</span>;</span><br><span class="line">        System.out.println(k); <span class="comment">// 3.1</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>create an anonymous variable</li><li>copy the value of x to this memory space</li><li>add the two numbers together</li></ol><h4 id="Explicit-Casting"><a href="#Explicit-Casting" class="headerlink" title="Explicit Casting"></a>Explicit Casting</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ryanhe; <span class="comment">// package statement</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">double</span> x = <span class="number">1.1</span>;</span><br><span class="line">        <span class="keyword">int</span> y = (<span class="keyword">int</span>)x + <span class="number">2</span>;</span><br><span class="line">        System.out.println(y); <span class="comment">// 3</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><font color="red">Explicit casting only happens between compatible variables.</font></p><p>We cannot cast a string to a number.</p><h4 id="String-to-numbers"><a href="#String-to-numbers" class="headerlink" title="String to numbers"></a>String to numbers</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ryanhe; <span class="comment">// package statement</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String x = <span class="string">&quot;1&quot;</span>;</span><br><span class="line">        <span class="keyword">int</span> y = Integer.parseInt(x) + <span class="number">2</span>; <span class="comment">// Integer class in java.lang</span></span><br><span class="line">        <span class="comment">// Short.parseShort();</span></span><br><span class="line">        <span class="comment">// Float.parseFloat();</span></span><br><span class="line">        System.out.println(y);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-13-The-Math-Class"><a href="#2-13-The-Math-Class" class="headerlink" title="2.13 The Math Class"></a>2.13 The Math Class</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ryanhe; <span class="comment">// package statement</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> result = Math.round(<span class="number">1.1f</span>);</span><br><span class="line">        System.out.println(result);</span><br><span class="line">        <span class="keyword">int</span> x = (<span class="keyword">int</span>)Math.ceil(<span class="number">1.1f</span>); <span class="comment">// the return value of ceil is double</span></span><br><span class="line">        <span class="keyword">int</span> y = (<span class="keyword">int</span>)Math.floor(<span class="number">1.1f</span>);</span><br><span class="line">        <span class="keyword">int</span> z = Math.max(x,y);</span><br><span class="line">        <span class="keyword">double</span> j = Math.random(); <span class="comment">// 0~1</span></span><br><span class="line">        <span class="keyword">int</span> k = (<span class="keyword">int</span>)Math.round(Math.random()*<span class="number">100</span>);</span><br><span class="line">        System.out.println(j);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-14-Formatting-Numbers"><a href="#2-14-Formatting-Numbers" class="headerlink" title="2.14 Formatting Numbers"></a>2.14 Formatting Numbers</h3><h4 id="Factory-Method"><a href="#Factory-Method" class="headerlink" title="Factory Method"></a>Factory Method</h4><p><code>getCurrencyInstance()</code></p><h4 id="Rename-variables"><a href="#Rename-variables" class="headerlink" title="Rename variables"></a>Rename variables</h4><ol><li>refactor -&gt; rename</li><li><code>shift</code>    +    <code>F6</code></li></ol><h4 id="Method-Chaining"><a href="#Method-Chaining" class="headerlink" title="Method Chaining"></a>Method Chaining</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">NumberFormat.getPercentInstance().format(<span class="number">0.1</span>)</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ryanhe; <span class="comment">// package statement</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.text.NumberFormat;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// NumberFormat currency = new NumberFormat();</span></span><br><span class="line">        <span class="comment">// &#x27;NumberFormat&#x27; is abstract cannot be instantiated</span></span><br><span class="line">        NumberFormat currency = NumberFormat.getCurrencyInstance();</span><br><span class="line">        String result = currency.format(<span class="number">1234567.891</span>);</span><br><span class="line">        System.out.println(result); <span class="comment">// ￥1,234,567.89</span></span><br><span class="line">        NumberFormat percentage = NumberFormat.getPercentInstance();</span><br><span class="line">        String result2 = percentage.format(<span class="number">0.1</span>); <span class="comment">// 10%</span></span><br><span class="line">        System.out.println(result2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-15-Reading-Input"><a href="#2-15-Reading-Input" class="headerlink" title="2.15 Reading Input"></a>2.15 Reading Input</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ryanhe; <span class="comment">// package statement</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        System.out.print(<span class="string">&quot;Age: &quot;</span>); <span class="comment">// don&#x27;t start a new line</span></span><br><span class="line">        <span class="keyword">byte</span> age = scanner.nextByte();</span><br><span class="line">        <span class="comment">// nextLine nextBoolean ...</span></span><br><span class="line">        <span class="comment">// don&#x27;t have nextString</span></span><br><span class="line">        System.out.println(<span class="string">&quot;You are &quot;</span> + age);</span><br><span class="line">        System.out.print(<span class="string">&quot;Name: &quot;</span>);</span><br><span class="line">        <span class="comment">// String name = scanner.next();  it only reads one token at a time</span></span><br><span class="line">        scanner.nextLine();</span><br><span class="line">        String name = scanner.nextLine().trim();</span><br><span class="line">        System.out.println(<span class="string">&quot;You are &quot;</span> + name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-16-Project-Mortgage-Calculator"><a href="#2-16-Project-Mortgage-Calculator" class="headerlink" title="2.16 Project: Mortgage Calculator"></a>2.16 Project: Mortgage Calculator</h3><h4 id="Mortgage-Calculation-Formula"><a href="#Mortgage-Calculation-Formula" class="headerlink" title="Mortgage Calculation Formula"></a>Mortgage Calculation Formula</h4><p>Premise: the same mortgage for each month</p><p>Principal $P$ </p><p>Monthly interest rate $r$</p><p>Period(months) $n$</p><p>The formula: $M=P\frac{r(1+r)^n}{(1+r)^n-1}$</p><p>Proof:</p><p><strong>Remaining Mortgage</strong></p><p>The first month:  $P(1+r)-M$</p><p>The second month: $(P(1+r)-M)(1+r)-M=P(1+r)^2-M(1+1+r)$</p><p>The third month: $P(1+r)^2-M(1+1+r)](1+r)-M=P(1+r)^3-M(1+(1+r)+(1+r)^2)$</p><p>$\cdots$</p><p>The n-th month: $P(1+r)^n-M(1+(1+r)+\cdots+(1+r)^{n-1})=0$</p><h4 id="My-Answer"><a href="#My-Answer" class="headerlink" title="My Answer"></a>My Answer</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ryanhe;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.text.NumberFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        System.out.print(<span class="string">&quot;Principal: &quot;</span>);</span><br><span class="line">        <span class="keyword">double</span> principal = scanner.nextDouble();</span><br><span class="line">        System.out.print(<span class="string">&quot;Annual Interest Rate: &quot;</span>);</span><br><span class="line">        <span class="keyword">double</span> annualInterestRate = scanner.nextDouble();</span><br><span class="line">        <span class="keyword">double</span> monthlyInterestRate = annualInterestRate/<span class="number">1200</span>;</span><br><span class="line">        System.out.print(<span class="string">&quot;Period(Years): &quot;</span>);</span><br><span class="line">        <span class="keyword">int</span> period = scanner.nextInt();</span><br><span class="line">        <span class="keyword">int</span> months = period*<span class="number">12</span>;</span><br><span class="line">        <span class="keyword">double</span> mortgage = principal*monthlyInterestRate*Math.pow(<span class="number">1</span>+monthlyInterestRate,</span><br><span class="line">                (<span class="keyword">double</span>)months)/(Math.pow(<span class="number">1</span>+monthlyInterestRate,(<span class="keyword">double</span>)months)-<span class="number">1</span>);</span><br><span class="line">        System.out.print(<span class="string">&quot;Mortgage: &quot;</span>);</span><br><span class="line">        NumberFormat currency = NumberFormat.getCurrencyInstance();</span><br><span class="line">        System.out.println(currency.format(mortgage));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="keyword">byte</span> MONTHS_IN_YEAR = <span class="number">12</span>;</span><br><span class="line"><span class="keyword">final</span> <span class="keyword">byte</span> PERCENT = <span class="number">100</span>;</span><br></pre></td></tr></table></figure><p>The usage of the final variables  is to avoid <strong>Magic Number</strong>.</p><h4 id="Magic-Number"><a href="#Magic-Number" class="headerlink" title="Magic Number"></a>Magic Number</h4><p>In wikipedia:</p><blockquote><ul><li>Unique values with unexplained meaning or multiple occurrences which could (preferably) be replaced with named constants</li><li>A constant numerical or text value used to identify a <a href="https://en.wikipedia.org/wiki/File_format">file format</a> or protocol; for files, see <a href="https://en.wikipedia.org/wiki/List_of_file_signatures">List of file signatures</a></li><li>Distinctive unique values that are unlikely to be mistaken for other meanings (e.g., <a href="https://en.wikipedia.org/wiki/Globally_Unique_Identifier">Globally Unique Identifiers</a>)</li></ul></blockquote><p>Here the magic number is the first meaning. </p><p>A number without name is hard for others to understand or correct your code.</p><p>So it should be replaced by constants.</p><h2 id="3-Control-Flow"><a href="#3-Control-Flow" class="headerlink" title="3 Control Flow"></a>3 Control Flow</h2><h3 id="3-1-Comparison-operators"><a href="#3-1-Comparison-operators" class="headerlink" title="3.1 Comparison operators"></a>3.1 Comparison operators</h3><h4 id="Boolean-Expression"><a href="#Boolean-Expression" class="headerlink" title="Boolean Expression"></a>Boolean Expression</h4><p><code>x == y</code></p><p><code>x != y</code></p><p><code>x &lt;= y</code></p><h3 id="3-2-Logical-Operators"><a href="#3-2-Logical-Operators" class="headerlink" title="3.2 Logical Operators"></a>3.2 Logical Operators</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ryanhe;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> temperature = <span class="number">22</span>;</span><br><span class="line">    <span class="keyword">boolean</span> isWarm = temperature &gt; <span class="number">20</span> &amp;&amp; temperature &lt; <span class="number">30</span>;</span><br><span class="line">        System.out.println(isWarm);</span><br><span class="line">        <span class="keyword">boolean</span> hasHighIncome = <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">boolean</span> hasGoodCredit = <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">boolean</span> hasCriminalRecord = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">boolean</span> isEligible = (hasHighIncome || hasGoodCredit) &amp;&amp; !hasCriminalRecord;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-3-If-Statements"><a href="#3-3-If-Statements" class="headerlink" title="3.3 If Statements"></a>3.3 If Statements</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ryanhe;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> temperature = <span class="number">32</span>;</span><br><span class="line">    <span class="keyword">if</span>(temperature &gt; <span class="number">30</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;It&#x27;s a hot day&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;Drink water&quot;</span>);</span><br><span class="line">        &#125; </span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(temperature &gt; <span class="number">20</span>)</span><br><span class="line">            System.out.println(<span class="string">&quot;Beautiful day&quot;</span>);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">            System.out.println(<span class="string">&quot;Cold day&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-4-Simplifying-If-Statements"><a href="#3-4-Simplifying-If-Statements" class="headerlink" title="3.4 Simplifying If Statements"></a>3.4 Simplifying If Statements</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ryanhe;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> income = <span class="number">120_000</span>;</span><br><span class="line">        <span class="comment">// boolean hasHighIncome = false; </span></span><br><span class="line">        <span class="comment">// give the hasHignIncome a default value to simplify the condition judgement</span></span><br><span class="line">        <span class="comment">// if (income &gt; 100_100)</span></span><br><span class="line">            <span class="comment">// hasHighIncome = true;</span></span><br><span class="line">        <span class="keyword">boolean</span> hasHighIncome = (income &gt; <span class="number">100_000</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="3-5-The-Ternary-Operator"><a href="#3-5-The-Ternary-Operator" class="headerlink" title="3.5 The Ternary Operator"></a>3.5 The Ternary Operator</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ryanhe;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> income = <span class="number">120_000</span>;</span><br><span class="line"><span class="comment">//        String className = &quot;Economy&quot;;</span></span><br><span class="line"><span class="comment">//        if (income &gt; 100_000)</span></span><br><span class="line"><span class="comment">//            className = &quot;First&quot;;</span></span><br><span class="line">        String className = income &gt; <span class="number">100_000</span> ? <span class="string">&quot;First&quot;</span> : <span class="string">&quot;Economy&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-6-Switch-Statements"><a href="#3-6-Switch-Statements" class="headerlink" title="3.6 Switch Statements"></a>3.6 Switch Statements</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ryanhe;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String role = <span class="string">&quot;admin&quot;</span>;</span><br><span class="line">        <span class="keyword">switch</span> (role)&#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;admin&quot;</span>:</span><br><span class="line">                System.out.println(<span class="string">&quot;You&#x27;re an admin.&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;moderator&quot;</span>:</span><br><span class="line">                System.out.println(<span class="string">&quot;You&#x27;re a moderator&quot;</span>);</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                System.out.println(<span class="string">&quot;You&#x27;re a guest&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-7-Exercise-FizzBuzz"><a href="#3-7-Exercise-FizzBuzz" class="headerlink" title="3.7 Exercise : FizzBuzz"></a>3.7 Exercise : FizzBuzz</h3><h4 id="My-Answer-1"><a href="#My-Answer-1" class="headerlink" title="My Answer"></a>My Answer</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ryanhe;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> FIZZ = <span class="number">5</span>;</span><br><span class="line">        <span class="keyword">int</span> BUZZ = <span class="number">3</span>;</span><br><span class="line">    Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        System.out.print(<span class="string">&quot;Number: &quot;</span>);</span><br><span class="line">        <span class="keyword">int</span> number = scanner.nextInt();</span><br><span class="line">        <span class="keyword">if</span> (number % FIZZ == <span class="number">0</span>)</span><br><span class="line">            System.out.print(<span class="string">&quot;FIZZ&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (number % BUZZ == <span class="number">0</span>)</span><br><span class="line">            System.out.println(<span class="string">&quot;BUZZ&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (number % FIZZ != <span class="number">0</span> &amp;&amp; number % BUZZ !=<span class="number">0</span>)</span><br><span class="line">            System.out.println(number);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Solution-1"><a href="#Solution-1" class="headerlink" title="Solution"></a>Solution</h4><p>Use one if statement -&gt; Avoid nested structure</p><h3 id="3-8-For-Loops"><a href="#3-8-For-Loops" class="headerlink" title="3.8 For Loops"></a>3.8 For Loops</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ryanhe;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)</span><br><span class="line">            System.out.println(<span class="string">&quot;Hello world &quot;</span> + i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-9-While-Loops"><a href="#3-9-While-Loops" class="headerlink" title="3.9 While Loops"></a>3.9 While Loops</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ryanhe;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String input = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">while</span>(!input.equals(<span class="string">&quot;quit&quot;</span>))&#123;</span><br><span class="line">            System.out.print(<span class="string">&quot;Input: &quot;</span>);</span><br><span class="line">            input = scanner.next().toLowerCase();</span><br><span class="line">            System.out.println(input);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-10-Do-While-Loops"><a href="#3-10-Do-While-Loops" class="headerlink" title="3.10 Do..While Loops"></a>3.10 Do..While Loops</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ryanhe;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String input = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">do</span>&#123;</span><br><span class="line">            System.out.print(<span class="string">&quot;Input: &quot;</span>);</span><br><span class="line">            input = scanner.next().toLowerCase();</span><br><span class="line">            System.out.println(input);</span><br><span class="line">        &#125; <span class="keyword">while</span>(!input.equals(<span class="string">&quot;quit&quot;</span>))</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-11-Break-and-Continue"><a href="#3-11-Break-and-Continue" class="headerlink" title="3.11 Break and Continue"></a>3.11 Break and Continue</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ryanhe;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String input = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">            System.out.print(<span class="string">&quot;Input: &quot;</span>);</span><br><span class="line">            input = scanner.next().toLowerCase();</span><br><span class="line">            <span class="keyword">if</span>(input.equals(<span class="string">&quot;pass&quot;</span>))</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">if</span>(input.equals(<span class="string">&quot;quit&quot;</span>))</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            System.out.println(input);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-12-For-Each-Loop"><a href="#3-12-For-Each-Loop" class="headerlink" title="3.12 For-Each Loop"></a>3.12 For-Each Loop</h3><p>The disadvantage of For-each loop: It cannot iterate from the end to the beginning.</p><h3 id="3-13-Improve-the-Mortgage-Calculator"><a href="#3-13-Improve-the-Mortgage-Calculator" class="headerlink" title="3.13 Improve the Mortgage Calculator"></a>3.13 Improve the Mortgage Calculator</h3><h4 id="My-Answer-2"><a href="#My-Answer-2" class="headerlink" title="My Answer"></a>My Answer</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ryanhe;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.text.NumberFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">byte</span> MONTHS_IN_YEAR = <span class="number">12</span>;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">byte</span> PERCENT = <span class="number">100</span>;</span><br><span class="line">        Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">double</span> principal;</span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">            System.out.print(<span class="string">&quot;Principal (￥1K - ￥1M): &quot;</span>);</span><br><span class="line">            principal = scanner.nextDouble();</span><br><span class="line">            <span class="keyword">if</span>(principal &lt; <span class="number">1000</span> || principal &gt; <span class="number">1000_000</span>)</span><br><span class="line">                System.out.println(<span class="string">&quot;Enter a value between 1,000 and 1,000,000.&quot;</span>);</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">double</span> annualInterestRate;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>)&#123;</span><br><span class="line">            System.out.print(<span class="string">&quot;Annual Interest Rate: &quot;</span>);</span><br><span class="line">            annualInterestRate = scanner.nextDouble();</span><br><span class="line">            <span class="keyword">if</span> (annualInterestRate &gt; <span class="number">0</span> &amp;&amp; annualInterestRate &lt;= <span class="number">30</span>)</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                System.out.println(<span class="string">&quot;Enter a value greater than 0 and less than or equal to 30.&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">double</span> monthlyInterestRate = annualInterestRate / MONTHS_IN_YEAR / PERCENT;</span><br><span class="line">        <span class="keyword">int</span> period;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>)&#123;</span><br><span class="line">            System.out.print(<span class="string">&quot;Period(Years): &quot;</span>);</span><br><span class="line">            period = scanner.nextInt();</span><br><span class="line">            <span class="keyword">if</span> (period &gt;= <span class="number">1</span> &amp;&amp; period &lt;=<span class="number">30</span>)</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                System.out.println(<span class="string">&quot;Enter a value between 1 and 30.&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> months = period*<span class="number">12</span>;</span><br><span class="line">        <span class="keyword">double</span> mortgage = principal*monthlyInterestRate*Math.pow(<span class="number">1</span>+monthlyInterestRate,</span><br><span class="line">                (<span class="keyword">double</span>)months)/(Math.pow(<span class="number">1</span>+monthlyInterestRate,(<span class="keyword">double</span>)months)-<span class="number">1</span>);</span><br><span class="line">        System.out.print(<span class="string">&quot;Mortgage: &quot;</span>);</span><br><span class="line">        NumberFormat currency = NumberFormat.getCurrencyInstance();</span><br><span class="line">        System.out.println(currency.format(mortgage));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Solution-2"><a href="#Solution-2" class="headerlink" title="Solution"></a>Solution</h4><ol><li><p>year is no more than 30, so we can use <code>byte year</code></p></li><li><p>if  there is a <code>break</code> in the if statement, we can delete the useless <code>else</code>.</p></li></ol><h2 id="4-Clean-Coding"><a href="#4-Clean-Coding" class="headerlink" title="4 Clean Coding"></a>4 Clean Coding</h2><h3 id="4-1-Creating-Methods"><a href="#4-1-Creating-Methods" class="headerlink" title="4.1 Creating Methods"></a>4.1 Creating Methods</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ryanhe;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    greetUser(<span class="string">&quot;Ryan&quot;</span>,<span class="string">&quot;He&quot;</span>);</span><br><span class="line">    greetUser(<span class="string">&quot;Mosh&quot;</span>,<span class="string">&quot;Hamedani&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">greetUser</span><span class="params">(String firstName, String lastName)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Hello &quot;</span> + firstName + <span class="string">&quot; &quot;</span> + lastName);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Hello &quot;</span> + firstName + <span class="string">&quot; &quot;</span> + lastName;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-2-Refactoring"><a href="#4-2-Refactoring" class="headerlink" title="4.2 Refactoring"></a>4.2 Refactoring</h3><h4 id="Refactoring"><a href="#Refactoring" class="headerlink" title="Refactoring"></a>Refactoring</h4><p>Changing the structure of the code without changing its behavior.</p><ol><li>Repetitive patterns on the code</li><li>Lines that are highly related</li></ol><h3 id="4-3-Extracting-Methods"><a href="#4-3-Extracting-Methods" class="headerlink" title="4.3 Extracting Methods"></a>4.3 Extracting Methods</h3><h4 id="The-calculateMortgage"><a href="#The-calculateMortgage" class="headerlink" title="The calculateMortgage"></a>The calculateMortgage</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">double</span> <span class="title">calculateMortgage</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">        <span class="keyword">int</span> principal,</span></span></span><br><span class="line"><span class="function"><span class="params">        <span class="keyword">float</span> annualInterest,</span></span></span><br><span class="line"><span class="function"><span class="params">        <span class="keyword">byte</span> years)</span></span>&#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">byte</span> MONTHS_IN_YEAR = <span class="number">12</span>;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">byte</span> PERCENT = <span class="number">100</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">short</span> numberOfPayments = (<span class="keyword">short</span>)(years * MONTHS_IN_YEAR);</span><br><span class="line">    <span class="keyword">double</span> monthlyInterestRate = annualInterest / MONTHS_IN_YEAR / PERCENT;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">double</span> mortgage = principal*monthlyInterestRate*Math.pow(<span class="number">1</span>+monthlyInterestRate,</span><br><span class="line">            numberOfPayments) /(Math.pow(<span class="number">1</span>+monthlyInterestRate, numberOfPayments)-<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> mortgage;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-4-Refactoring-Repetitive-Patterns"><a href="#4-4-Refactoring-Repetitive-Patterns" class="headerlink" title="4.4 Refactoring Repetitive Patterns"></a>4.4 Refactoring Repetitive Patterns</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ryanhe;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.text.NumberFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> principal = (<span class="keyword">int</span>)readNumber(<span class="string">&quot;Principal(￥1K-￥1M): &quot;</span>,<span class="number">1000</span>,<span class="number">1_000_000</span>);</span><br><span class="line">        <span class="keyword">float</span> annualInterest = (<span class="keyword">float</span>)readNumber(<span class="string">&quot;Annual Interest Rate: &quot;</span>, <span class="number">0</span>, <span class="number">30</span>);</span><br><span class="line">        <span class="keyword">byte</span> years = (<span class="keyword">byte</span>)readNumber(<span class="string">&quot;Period(Years): &quot;</span>, <span class="number">1</span>, <span class="number">30</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">double</span> mortgage = calculateMortgage(principal, annualInterest, years);</span><br><span class="line">        </span><br><span class="line">        NumberFormat currency = NumberFormat.getCurrencyInstance();</span><br><span class="line">        System.out.println(currency.format(mortgage));</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">double</span> <span class="title">readNumber</span><span class="params">(String prompt, <span class="keyword">double</span> min, <span class="keyword">double</span> max)</span></span>&#123;</span><br><span class="line">        Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">double</span> value;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>)&#123;</span><br><span class="line">            System.out.print(prompt);</span><br><span class="line">            value = scanner.nextInt();</span><br><span class="line">            <span class="keyword">if</span> (value &gt;= min &amp;&amp; value &lt;=max)</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            System.out.println(<span class="string">&quot;Enter a value between &quot;</span> + min + <span class="string">&quot; and &quot;</span> + max + <span class="string">&quot;.&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">double</span> <span class="title">calculateMortgage</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">            <span class="keyword">int</span> principal,</span></span></span><br><span class="line"><span class="function"><span class="params">            <span class="keyword">float</span> annualInterest,</span></span></span><br><span class="line"><span class="function"><span class="params">            <span class="keyword">byte</span> years)</span></span>&#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">byte</span> MONTHS_IN_YEAR = <span class="number">12</span>;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">byte</span> PERCENT = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">short</span> numberOfPayments = (<span class="keyword">short</span>)(years * MONTHS_IN_YEAR);</span><br><span class="line">        <span class="keyword">double</span> monthlyInterestRate = annualInterest / MONTHS_IN_YEAR / PERCENT;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">double</span> mortgage = principal*monthlyInterestRate*Math.pow(<span class="number">1</span>+monthlyInterestRate,</span><br><span class="line">                numberOfPayments) /(Math.pow(<span class="number">1</span>+monthlyInterestRate, numberOfPayments)-<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> mortgage;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-5-Payment-Schedule"><a href="#4-5-Payment-Schedule" class="headerlink" title="4.5 Payment Schedule"></a>4.5 Payment Schedule</h3><h4 id="Remainig-Loan-Balance-Formula"><a href="#Remainig-Loan-Balance-Formula" class="headerlink" title="Remainig Loan Balance Formula"></a>Remainig Loan Balance Formula</h4><p>Premise: the same mortgage for each month</p><p>Principal $P$ </p><p>Monthly interest rate $r$</p><p>Period(months) $n$</p><p>Number of payments made $c$</p><p>The formula: $B=P\frac{(1+r)^n-(1+r)^c}{(1+r)^n-1}$</p><h4 id="Refactoring-1"><a href="#Refactoring-1" class="headerlink" title="Refactoring"></a>Refactoring</h4><p>Main Menu -&gt; Refactor -&gt; Extract -&gt; Method</p><h4 id="Solution-3"><a href="#Solution-3" class="headerlink" title="Solution"></a>Solution</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ryanhe;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.text.NumberFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">byte</span> MONTHS_IN_YEAR = <span class="number">12</span>;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">byte</span> PERCENT = <span class="number">100</span>;</span><br><span class="line">    <span class="comment">// they are field and remember to add static</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> principal = (<span class="keyword">int</span>) readNumber(<span class="string">&quot;Principal(￥1K - ￥1M): &quot;</span>, <span class="number">1000</span>, <span class="number">1_000_000</span>);</span><br><span class="line">        <span class="keyword">float</span> annualInterest = (<span class="keyword">float</span>) readNumber(<span class="string">&quot;Annual Interest Rate: &quot;</span>, <span class="number">0</span>, <span class="number">30</span>);</span><br><span class="line">        <span class="keyword">byte</span> years = (<span class="keyword">byte</span>) readNumber(<span class="string">&quot;Period(Years): &quot;</span>, <span class="number">1</span>, <span class="number">30</span>);</span><br><span class="line"></span><br><span class="line">        printMortgage(annualInterest, principal, years);</span><br><span class="line"></span><br><span class="line">        printPaymentSchedule(principal, years, annualInterest);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printMortgage</span><span class="params">(<span class="keyword">float</span> annualInterest, <span class="keyword">int</span> principal, <span class="keyword">byte</span> years)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">double</span> mortgage = calculateMortgage(principal, annualInterest, years);</span><br><span class="line">        NumberFormat currency = NumberFormat.getCurrencyInstance();</span><br><span class="line">        System.out.println(<span class="string">&quot;MORTGAGE--------\nMonthly Payments:&quot;</span> + currency.format(mortgage));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printPaymentSchedule</span><span class="params">(<span class="keyword">int</span> principal, <span class="keyword">byte</span> years, <span class="keyword">float</span> annualInterest)</span> </span>&#123;</span><br><span class="line">        System.out.println();</span><br><span class="line">        System.out.println(<span class="string">&quot;PAYMENT SCHEDULE\n----------------&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">short</span> month = <span class="number">0</span>; month &lt; years * MONTHS_IN_YEAR; month++) &#123;</span><br><span class="line">            System.out.println(NumberFormat.getCurrencyInstance().format(calculateBalance(principal, annualInterest,</span><br><span class="line">                    years, (<span class="keyword">short</span>) (month+<span class="number">1</span>))));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">double</span> <span class="title">readNumber</span> <span class="params">(String prompt,<span class="keyword">double</span> min, <span class="keyword">double</span> max)</span></span>&#123;</span><br><span class="line">        Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">double</span> value;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            System.out.print(prompt);</span><br><span class="line">            value = scanner.nextInt();</span><br><span class="line">            <span class="keyword">if</span> (value &gt;= min &amp;&amp; value &lt;= max)</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            System.out.println(<span class="string">&quot;Enter a value between &quot;</span> + min + <span class="string">&quot; and &quot;</span> + max + <span class="string">&quot;.&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">double</span> <span class="title">calculateBalance</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">            <span class="keyword">int</span> principal,</span></span></span><br><span class="line"><span class="function"><span class="params">            <span class="keyword">float</span> annualInterest,</span></span></span><br><span class="line"><span class="function"><span class="params">            <span class="keyword">byte</span> years,</span></span></span><br><span class="line"><span class="function"><span class="params">            <span class="keyword">short</span> numberOfPaymentsMade)</span></span>&#123;</span><br><span class="line">        <span class="keyword">short</span> numberOfPayments = (<span class="keyword">short</span>) (years * MONTHS_IN_YEAR);</span><br><span class="line">        <span class="keyword">double</span> monthlyInterest = annualInterest / MONTHS_IN_YEAR / PERCENT;</span><br><span class="line">        <span class="keyword">double</span> balance =  principal * (Math.pow(<span class="number">1</span> + monthlyInterest, numberOfPayments) - Math.pow(<span class="number">1</span> + monthlyInterest,</span><br><span class="line">                numberOfPaymentsMade)) / (Math.pow(<span class="number">1</span> + monthlyInterest, numberOfPayments) - <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> balance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">double</span> <span class="title">calculateMortgage</span> <span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">            <span class="keyword">int</span> principal,</span></span></span><br><span class="line"><span class="function"><span class="params">            <span class="keyword">float</span> annualInterest,</span></span></span><br><span class="line"><span class="function"><span class="params">            <span class="keyword">byte</span> years)</span></span>&#123;</span><br><span class="line">        <span class="keyword">short</span> numberOfPayments = (<span class="keyword">short</span>) (years * MONTHS_IN_YEAR);</span><br><span class="line">        <span class="keyword">double</span> monthlyInterest = annualInterest / MONTHS_IN_YEAR / PERCENT;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">double</span> mortgage = principal * monthlyInterest * Math.pow(<span class="number">1</span> + monthlyInterest,</span><br><span class="line">                numberOfPayments) / (Math.pow(<span class="number">1</span> + monthlyInterest, numberOfPayments) - <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> mortgage;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-6-Summary"><a href="#4-6-Summary" class="headerlink" title="4.6 Summary"></a>4.6 Summary</h3><ul><li><p>Keep your methods short</p><ul><li>method: 5-10 lines, no more than 20 lines.</li></ul></li><li><p>Extract repetitive patterns</p></li><li><p>Extract highly related statements</p></li></ul><h2 id="5-Debugging-and-Deploying-Applications"><a href="#5-Debugging-and-Deploying-Applications" class="headerlink" title="5 Debugging and Deploying Applications"></a>5 Debugging and Deploying Applications</h2><h3 id="5-1-Types-of-Errors"><a href="#5-1-Types-of-Errors" class="headerlink" title="5.1 Types of Errors"></a>5.1 Types of Errors</h3><ul><li>Compile-time Errors<ul><li>grammar</li><li>syntax</li></ul></li><li>Run-time Errors<ul><li>Debugger</li></ul></li></ul><h3 id="5-2-Common-Syntax-Errors"><a href="#5-2-Common-Syntax-Errors" class="headerlink" title="5.2 Common Syntax Errors"></a>5.2 Common Syntax Errors</h3><ul><li><p>don’t forget to specify the type</p></li><li><p>semicolon</p></li><li><p>parenthesis</p></li><li><p>double quotes of String</p></li><li><p>misspell (<strong>case sensitive</strong>)</p></li><li><p>do not use the reserve key words </p></li><li><p>misuse <code>=</code> and <code>==</code></p></li></ul><h3 id="5-3-Debugging-Java-Applications"><a href="#5-3-Debugging-Java-Applications" class="headerlink" title="5.3 Debugging Java Applications"></a>5.3 Debugging Java Applications</h3><p>break point: <code>ctrl</code>+<code>F8</code></p><p>dubug: <code>shift</code>+<code>F9</code></p><p>add watch</p><h3 id="5-4-Packaging-Java-Applications"><a href="#5-4-Packaging-Java-Applications" class="headerlink" title="5.4 Packaging Java Applications"></a>5.4 Packaging Java Applications</h3><p>console or command line appilcation</p><p>JAR file (Java archieve)</p><p>File -&gt; Program Structure -&gt; Artifacts -&gt; <code>+</code> -&gt; JAR -&gt; from modules with dependencies</p><p>Build -&gt; Build Artifacts</p><p>Module is  another level of abstraction above package</p><p>In command line:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar &lt;jar file name&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;Videos by: Mosh Hamedani&lt;br&gt;Link: &lt;a href=&quot;https://www.bilibili.com/video/BV19J411t7dD&quot;&gt;https://www.bilibili.com/video/BV19J411t7dD&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="Java" scheme="http://ryanhe123.github.io/categories/Java/"/>
    
    
    <category term="Java" scheme="http://ryanhe123.github.io/tags/Java/"/>
    
    <category term="CodeWithMosh" scheme="http://ryanhe123.github.io/tags/CodeWithMosh/"/>
    
  </entry>
  
</feed>
